--------------------Задача 1-------------------------

----1 часть----
function counter(n) {
    let current = n;
    const intervalId = setInterval(() => {
        console.log(current);
        if (current === 0) {
            clearInterval(intervalId);
        }
        current--;
    }, 1000);
}
console.log("Функция counter(n):");
counter(5);

----2 часть----
function createCounter(n) {
    let current = n;
    let intervalId;

    return {
        start() {
            if (!intervalId) {
                intervalId = setInterval(() => {
                    console.log(current);
                    if (current === 0) {
                        clearInterval(intervalId);
                    }
                    current--;
                }, 1000);
            }
        },
        pause() {
            clearInterval(intervalId);
            intervalId = undefined;
        },
        stop() {
            clearInterval(intervalId);
            intervalId = undefined;
            current = n;
        }
    };
}

console.log("\nФункция createCounter(n):");
const myCounter = createCounter(5); 
myCounter.start(); 
setTimeout(() => {
    myCounter.pause(); 
    console.log("Счетчик приостановлен.");
}, 3000);
setTimeout(() => {
    myCounter.start(); 
    console.log("Счетчик возобновлен.");
}, 5000);
setTimeout(() => {
    myCounter.stop(); 
    console.log("Счетчик остановлен.");
}, 8000);

-------------------Задача 2-------------------
-----часть 1-----
function delay(N) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, N * 1000);
    });
}
console.log("Функции delay(N):");
delay(5)
    .then(() => {
        console.log("Прошло 5 секунд");
    });
-----Часть 2------
function delay(N) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, N * 1000);
    });
}

async function runCounter(N) {
    for (let i = N; i >= 0; i--) {
        console.log(i);
        await delay(1); 
    }
    console.log("Счетчик завершен.");
}
runCounter(5);

-----Часть 3-----
function getFirstRepo(username) {
    const url = `https://api.github.com/users/${username}/repos`;
    return fetch(url)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (!data || data.length === 0) {
                throw new Error('User has no repositories');
            }
            return data[0].name;
        });
}
console.log("\n Функция getFirstRepo(username):");
getFirstRepo("ZenkovIA")
    .then(repoName => {
        console.log(`Первый репозиторий пользователя на GitHub: ${repoName}`);
    })
    .catch(error => {
        console.error(error.message);
    }); 

-------------------Задача 3-------------------
class HttpError extends Error {
  constructor(response) {
    super(`${response.status} for ${response.url}`);
    this.name = 'HttpError';
    this.response = response;
  }
}

async function loadJson(url) {
  const response = await fetch(url);
  if (response.status === 200) {
    return await response.json();
  } else {
    throw new HttpError(response);
  }
}

// Запрашивается логин, пока github не вернет существующего пользователя.
async function getGithubUser() {
  let name;
  do {
    name = prompt("Введите логин?", "iliakan");
    try {
      const user = await loadJson(`https://api.github.com/users/${name}`);
      alert(`Полное имя: ${user.name}.`);
      return user;
    } catch (err) {
      if (err instanceof HttpError && err.response.status === 404) {
        alert("Такого пользователя не существует, пожалуйста, повторите ввод.");
      } else {
        throw err;
      }
    }
  } while (true);
}

// Вызов функции getGithubUser и обработка ее результата
(async () => {
  try {
    await getGithubUser();
  } catch (error) {
    console.error(error.message);
  }
})();